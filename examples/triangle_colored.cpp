
#include "yoshix_fix_function.h"
#include <math.h>
#include <cmath>
#include <stdio.h>
#include <iostream>
#include <windows.h>
#include <winuser.h>
#include <cstdlib>
#include <cstdio>
#include <conio.h>

using namespace gfx;

#define PI 3.14159265

namespace
{
    class CApplication : public IApplication
    {
        public:

            CApplication();
            virtual ~CApplication();

        private:

            float   m_FieldOfViewY;     // Vertical view angle of the camera

            BHandle m_pTriangleMesh;    // A pointer to a YoshiX mesh, which represents a single triangle.
            BHandle m_pFloorMesh;    // A pointer to a YoshiX mesh, which represents a single triangle LOL.
            BHandle m_pIsoscelesTriangleMesh;
            BHandle m_pBackgroundMesh; // A pointer to a YoshiX mesh, wich represents a sqare as Background
            BHandle m_pDefaultSquare;
            BHandle m_pC4DCubeMesh;



        private:

            virtual bool InternOnStartup();
            virtual bool InternOnCreateMeshes();
            virtual bool InternOnReleaseMeshes();
            virtual bool InternOnResize(int _Width, int _Height);
            virtual bool InternOnKeyEvent(unsigned int _Key, bool _IsKeyDown, bool _IsAltDown);
            virtual bool InternOnMouseEvent(int _X, int _Y, int _Button, bool _IsButtonDown, bool _IsDoubleClick, int _WheelDelta);
            virtual bool InternOnUpdate();
            virtual bool InternOnFrame();
    };

    class IsoscelesTriangle {
        public:
            BHandle m_pIsoscelesTriangleMesh;

            SMeshInfo MeshInfo;

            IsoscelesTriangle(float radius) {

                this->m_pIsoscelesTriangleMesh = nullptr;

                static float s_IsoscelesTriangleVertices[][3] =
                {
                    { cos(210 * PI / 180) * radius,  sin(210 * PI / 180) * radius, 0.0f, },
                    { cos(330 * PI / 180) * radius,  sin(330 * PI / 180) * radius, 0.0f, },
                    { 0.0f,  radius, 0.0f, },
                };

                static float s_IsoscelesTriangleNormals[][3] =
                {
                    { 0.0f, 0.0f, -1.0f, },             // Normal of vertex 0.
                    { 0.0f, 0.0f, -1.0f, },             // Normal of vertex 1.
                    { 0.0f, 0.0f, -1.0f, },             // Normal of vertex 2.
                };


                static float s_IsoscelesTriangleColors[][4] =
                {
                    { 1.0f, 0.0f, 0.0f, 1.0f, },        // Color of vertex 0.
                    { 1.0f, 1.0f, 0.0f, 1.0f, },        // Color of vertex 1.
                    { 1.0f, 0.0f, 1.0f, 1.0f, },        // Color of vertex 2.
                };

                static int s_IsoscelesTriangleIndices[][3] =
                {
                    { 0, 1, 2},
                };



                MeshInfo.m_pVertices = &s_IsoscelesTriangleVertices[0][0];
                MeshInfo.m_pNormals = &s_IsoscelesTriangleNormals[0][0];
                MeshInfo.m_pColors = nullptr;
                MeshInfo.m_pTexCoords = nullptr;
                MeshInfo.m_NumberOfVertices = 3;
                MeshInfo.m_NumberOfIndices = 3;
                MeshInfo.m_pIndices = &s_IsoscelesTriangleIndices[0][0];
                MeshInfo.m_pTexture = nullptr;

                //CreateMesh(MeshInfo, &m_pIsoscelesTriangleMesh);
            }

    };
} // namespace

namespace
{
    CApplication::CApplication()
        : m_FieldOfViewY (60.0f)    // Set the vertical view angle of the camera to 60 degrees.
        , m_pTriangleMesh(nullptr)
        , m_pFloorMesh(nullptr)
        , m_pIsoscelesTriangleMesh(nullptr)
        , m_pBackgroundMesh(nullptr)
        , m_pDefaultSquare(nullptr)
        , m_pC4DCubeMesh(nullptr)
    {
    }

    IsoscelesTriangle newTriangle(2.0f);

    // -----------------------------------------------------------------------------

    CApplication::~CApplication()
    {
    }

    bool CApplication::InternOnStartup()
    {

        
        // -----------------------------------------------------------------------------
        // Define the background color of the window. Colors are always 4D tuples,
        // whereas the components of the tuple represent the red, green, blue, and alpha 
        // channel. The alpha channel indicates the transparency of the color. A value
        // of 1 means the color is completely opaque. A value of 0 means the color is
        // completely transparent. The channels red, green, and blue also are values
        // 0..1 with 0 indicating the minimum intensity and 1 the maximum intensity.
        // -----------------------------------------------------------------------------
        float ClearColor[4] = { 0.1f, 0.1f, 0.1f, 1.0f, };

        SetClearColor(ClearColor);

        // -----------------------------------------------------------------------------
        // Define the position of the light source in 3D space. The fixed function 
        // pipeline of YoshiX only supports one light source.
        // -----------------------------------------------------------------------------
        float LightPosition[3] = { 0.0f, 0.0f, -1.0f, };

        SetLightPosition(LightPosition);

        // -----------------------------------------------------------------------------
        // Define the ambient, diffuse, and specular color of the light source. 
        // -----------------------------------------------------------------------------
        float LightAmbientColor[4] = { 1.0f, 0.1f, 0.1f, 1.0f, };
        float LightDiffuseColor[4] = { 1.0f, 0.6f, 0.6f, 1.0f, };
        float LightSpecularColor[4] = { 1.0f, 0.9f, 0.9f, 1.0f, };

        SetLightColor(LightAmbientColor, LightDiffuseColor, LightSpecularColor, 127);
        std::cout << "Startup \n";
        return true;
    }

    // -----------------------------------------------------------------------------

    bool CApplication::InternOnCreateMeshes()
    {
        // -----------------------------------------------------------------------------
        // Define the vertices of the mesh and their attributes.
        // -----------------------------------------------------------------------------

        static float s_TriangleVertices[][3] =
        {
            { -2.0f,  -2.0f, 1.0f, },
            { 2.0f,  -2.0f, 1.0f, },
            { 0.0f,  2.0f, 1.0f, },
            { 0.0f,  -2.0f, -1.0f, },
        };

        static float s_TriangleColors[][4] =
        {
            { 1.0f, 0.0f, 0.0f, 1.0f, },        // Color of vertex 0.
            { 0.0f, 1.0f, 0.0f, 1.0f, },        // Color of vertex 1.
            { 0.0f, 0.0f, 1.0f, 1.0f, },        // Color of vertex 2.
            { 1.0f, 1.0f, 0.0f, 1.0f, },
        };

        static int s_TriangleIndices[][3] =
        {
            { 2, 1, 0, },
            { 0, 3, 2, },
            { 3, 1, 2, },
            { 0, 1, 3, },
        };

        static const float s_HalfEdgeLength = 0.5f;

        static float s_FloorVertices[][3] =
        {
            { -s_HalfEdgeLength,  0.0f, -s_HalfEdgeLength, },
            {  s_HalfEdgeLength,  0.0f, -s_HalfEdgeLength, },
            {  s_HalfEdgeLength,  0.0f,  s_HalfEdgeLength, },
            { -s_HalfEdgeLength,  0.0f,  s_HalfEdgeLength, },
        };

        static float s_FloorColors[][4] =
        {
            { 0.5f, 0.5f, 0.5f, 1.0f, },
            { 0.5f, 0.5f, 0.5f, 1.0f, },
            { 0.5f, 0.5f, 0.5f, 1.0f, },
            { 0.5f, 0.5f, 0.5f, 1.0f, },
        };

        static int s_FloorIndices[][3] =
        {
            { 0, 1, 2, },
            { 3, 0, 2, },
        };


        static const float s_BackgroundLenght = 0.5f;

        static float s_BackgroundVertices[][3] =
        {
            { -s_BackgroundLenght,  -s_BackgroundLenght, 0.0f, },
            {  s_BackgroundLenght,  -s_BackgroundLenght, 0.0f, },
            {  s_BackgroundLenght,  s_BackgroundLenght,  0.0f, },
            { -s_BackgroundLenght,  s_BackgroundLenght,  0.0f, },
        };

        static float s_BackgroundColors[][4] =
        {
            { 0.8f, 0.8f, 0.8f, 1.0f, },
            { 0.8f, 0.8f, 0.8f, 1.0f, },
            { 0.8f, 0.8f, 0.8f, 1.0f, },
            { 0.8f, 0.8f, 0.8f, 1.0f, },
        };

        static int s_BackgroundIndices[][3] =
        {
            { 0, 1, 2, },
            { 3, 0, 2, },
        };

        static const float s_DefaultSquareLenght = 0.5f;

        static float s_DefaultSquareVertices[][3] =
        {
            { -s_BackgroundLenght,  -s_BackgroundLenght, 0.0f, },
            {  s_BackgroundLenght,  -s_BackgroundLenght, 0.0f, },
            {  s_BackgroundLenght,  s_BackgroundLenght,  0.0f, },
            { -s_BackgroundLenght,  s_BackgroundLenght,  0.0f, },
        };

        static float s_DefaultSquareColors[][4] =
        {
            { 0.0f, 0.5f, 0.5f, 1.0f, },
            { 0.0f, 0.5f, 0.5f, 1.0f, },
            { 0.0f, 0.5f, 0.8f, 1.0f, },
            { 0.0f, 0.5f, 0.8f, 1.0f, },
        };

        static int s_DefaultSquareIndices[][3] =
        {
            { 0, 1, 2, },
            { 3, 0, 2, },
        };


        // C4D Exported Cube

        static float s_C4DCubeVertices[][3] =
        {
            {4.0,-2.5,0.0},
            {5.0,-2.5,0.0},
            {5.0,-1.25,0.0},
            {5.0,0.0,0.0},
            {5.0,1.25,0.0},
            {5.0,2.5,0.0},
            {4.0,2.5,0.0},
            {4.0,1.25,0.0},
            {4.0,0.0,0.0},
            {4.0,-1.25,0.0},
            {3.936,-2.5,0.714},
            {4.92,-2.5,0.893},
            {4.92,-1.25,0.893},
            {4.92,0.0,0.893},
            {4.92,1.25,0.893},
            {4.92,2.5,0.893},
            {3.936,2.5,0.714},
            {3.936,1.25,0.714},
            {3.936,0.0,0.714},
            {3.936,-1.25,0.714},
            {3.745,-2.5,1.405},
            {4.681,-2.5,1.757},
            {4.681,-1.25,1.757},
            {4.681,0.0,1.757},
            {4.681,1.25,1.757},
            {4.681,2.5,1.757},
            {3.745,2.5,1.405},
            {3.745,1.25,1.405},
            {3.745,0.0,1.405},
            {3.745,-1.25,1.405},
            {3.434,-2.5,2.052},
            {4.292,-2.5,2.564},
            {4.292,-1.25,2.564},
            {4.292,0.0,2.564},
            {4.292,1.25,2.564},
            {4.292,2.5,2.564},
            {3.434,2.5,2.052},
            {3.434,1.25,2.052},
            {3.434,0.0,2.052},
            {3.434,-1.25,2.052},
            {3.012,-2.5,2.632},
            {3.765,-2.5,3.29},
            {3.765,-1.25,3.29},
            {3.765,0.0,3.29},
            {3.765,1.25,3.29},
            {3.765,2.5,3.29},
            {3.012,2.5,2.632},
            {3.012,1.25,2.632},
            {3.012,0.0,2.632},
            {3.012,-1.25,2.632},
            {2.494,-2.5,3.127},
            {3.117,-2.5,3.909},
            {3.117,-1.25,3.909},
            {3.117,0.0,3.909},
            {3.117,1.25,3.909},
            {3.117,2.5,3.909},
            {2.494,2.5,3.127},
            {2.494,1.25,3.127},
            {2.494,0.0,3.127},
            {2.494,-1.25,3.127},
            {1.895,-2.5,3.522},
            {2.369,-2.5,4.403},
            {2.369,-1.25,4.403},
            {2.369,0.0,4.403},
            {2.369,1.25,4.403},
            {2.369,2.5,4.403},
            {1.895,2.5,3.522},
            {1.895,1.25,3.522},
            {1.895,0.0,3.522},
            {1.895,-1.25,3.522},
            {1.236,-2.5,3.804},
            {1.545,-2.5,4.755},
            {1.545,-1.25,4.755},
            {1.545,0.0,4.755},
            {1.545,1.25,4.755},
            {1.545,2.5,4.755},
            {1.236,2.5,3.804},
            {1.236,1.25,3.804},
            {1.236,0.0,3.804},
            {1.236,-1.25,3.804},
            {0.537,-2.5,3.964},
            {0.671,-2.5,4.955},
            {0.671,-1.25,4.955},
            {0.671,0.0,4.955},
            {0.671,1.25,4.955},
            {0.671,2.5,4.955},
            {0.537,2.5,3.964},
            {0.537,1.25,3.964},
            {0.537,0.0,3.964},
            {0.537,-1.25,3.964},
            {-0.179,-2.5,3.996},
            {-0.224,-2.5,4.995},
            {-0.224,-1.25,4.995},
            {-0.224,0.0,4.995},
            {-0.224,1.25,4.995},
            {-0.224,2.5,4.995},
            {-0.179,2.5,3.996},
            {-0.179,1.25,3.996},
            {-0.179,0.0,3.996},
            {-0.179,-1.25,3.996},
            {-0.89,-2.5,3.9},
            {-1.113,-2.5,4.875},
            {-1.113,-1.25,4.875},
            {-1.113,0.0,4.875},
            {-1.113,1.25,4.875},
            {-1.113,2.5,4.875},
            {-0.89,2.5,3.9},
            {-0.89,1.25,3.9},
            {-0.89,0.0,3.9},
            {-0.89,-1.25,3.9},
            {-1.572,-2.5,3.678},
            {-1.965,-2.5,4.598},
            {-1.965,-1.25,4.598},
            {-1.965,0.0,4.598},
            {-1.965,1.25,4.598},
            {-1.965,2.5,4.598},
            {-1.572,2.5,3.678},
            {-1.572,1.25,3.678},
            {-1.572,0.0,3.678},
            {-1.572,-1.25,3.678},
            {-2.204,-2.5,3.338},
            {-2.754,-2.5,4.173},
            {-2.754,-1.25,4.173},
            {-2.754,0.0,4.173},
            {-2.754,1.25,4.173},
            {-2.754,2.5,4.173},
            {-2.204,2.5,3.338},
            {-2.204,1.25,3.338},
            {-2.204,0.0,3.338},
            {-2.204,-1.25,3.338},
            {-2.764,-2.5,2.891},
            {-3.455,-2.5,3.614},
            {-3.455,-1.25,3.614},
            {-3.455,0.0,3.614},
            {-3.455,1.25,3.614},
            {-3.455,2.5,3.614},
            {-2.764,2.5,2.891},
            {-2.764,1.25,2.891},
            {-2.764,0.0,2.891},
            {-2.764,-1.25,2.891},
            {-3.236,-2.5,2.351},
            {-4.045,-2.5,2.939},
            {-4.045,-1.25,2.939},
            {-4.045,0.0,2.939},
            {-4.045,1.25,2.939},
            {-4.045,2.5,2.939},
            {-3.236,2.5,2.351},
            {-3.236,1.25,2.351},
            {-3.236,0.0,2.351},
            {-3.236,-1.25,2.351},
            {-3.604,-2.5,1.736},
            {-4.505,-2.5,2.169},
            {-4.505,-1.25,2.169},
            {-4.505,0.0,2.169},
            {-4.505,1.25,2.169},
            {-4.505,2.5,2.169},
            {-3.604,2.5,1.736},
            {-3.604,1.25,1.736},
            {-3.604,0.0,1.736},
            {-3.604,-1.25,1.736},
            {-3.856,-2.5,1.064},
            {-4.82,-2.5,1.33},
            {-4.82,-1.25,1.33},
            {-4.82,0.0,1.33},
            {-4.82,1.25,1.33},
            {-4.82,2.5,1.33},
            {-3.856,2.5,1.064},
            {-3.856,1.25,1.064},
            {-3.856,0.0,1.064},
            {-3.856,-1.25,1.064},
            {-3.984,-2.5,0.359},
            {-4.98,-2.5,0.448},
            {-4.98,-1.25,0.448},
            {-4.98,0.0,0.448},
            {-4.98,1.25,0.448},
            {-4.98,2.5,0.448},
            {-3.984,2.5,0.359},
            {-3.984,1.25,0.359},
            {-3.984,0.0,0.359},
            {-3.984,-1.25,0.359},
            {-3.984,-2.5,-0.359},
            {-4.98,-2.5,-0.448},
            {-4.98,-1.25,-0.448},
            {-4.98,0.0,-0.448},
            {-4.98,1.25,-0.448},
            {-4.98,2.5,-0.448},
            {-3.984,2.5,-0.359},
            {-3.984,1.25,-0.359},
            {-3.984,0.0,-0.359},
            {-3.984,-1.25,-0.359},
            {-3.856,-2.5,-1.064},
            {-4.82,-2.5,-1.33},
            {-4.82,-1.25,-1.33},
            {-4.82,0.0,-1.33},
            {-4.82,1.25,-1.33},
            {-4.82,2.5,-1.33},
            {-3.856,2.5,-1.064},
            {-3.856,1.25,-1.064},
            {-3.856,0.0,-1.064},
            {-3.856,-1.25,-1.064},
            {-3.604,-2.5,-1.736},
            {-4.505,-2.5,-2.169},
            {-4.505,-1.25,-2.169},
            {-4.505,0.0,-2.169},
            {-4.505,1.25,-2.169},
            {-4.505,2.5,-2.169},
            {-3.604,2.5,-1.736},
            {-3.604,1.25,-1.736},
            {-3.604,0.0,-1.736},
            {-3.604,-1.25,-1.736},
            {-3.236,-2.5,-2.351},
            {-4.045,-2.5,-2.939},
            {-4.045,-1.25,-2.939},
            {-4.045,0.0,-2.939},
            {-4.045,1.25,-2.939},
            {-4.045,2.5,-2.939},
            {-3.236,2.5,-2.351},
            {-3.236,1.25,-2.351},
            {-3.236,0.0,-2.351},
            {-3.236,-1.25,-2.351},
            {-2.764,-2.5,-2.891},
            {-3.455,-2.5,-3.614},
            {-3.455,-1.25,-3.614},
            {-3.455,0.0,-3.614},
            {-3.455,1.25,-3.614},
            {-3.455,2.5,-3.614},
            {-2.764,2.5,-2.891},
            {-2.764,1.25,-2.891},
            {-2.764,0.0,-2.891},
            {-2.764,-1.25,-2.891},
            {-2.204,-2.5,-3.338},
            {-2.754,-2.5,-4.173},
            {-2.754,-1.25,-4.173},
            {-2.754,0.0,-4.173},
            {-2.754,1.25,-4.173},
            {-2.754,2.5,-4.173},
            {-2.204,2.5,-3.338},
            {-2.204,1.25,-3.338},
            {-2.204,0.0,-3.338},
            {-2.204,-1.25,-3.338},
            {-1.572,-2.5,-3.678},
            {-1.965,-2.5,-4.598},
            {-1.965,-1.25,-4.598},
            {-1.965,0.0,-4.598},
            {-1.965,1.25,-4.598},
            {-1.965,2.5,-4.598},
            {-1.572,2.5,-3.678},
            {-1.572,1.25,-3.678},
            {-1.572,0.0,-3.678},
            {-1.572,-1.25,-3.678},
            {-0.89,-2.5,-3.9},
            {-1.113,-2.5,-4.875},
            {-1.113,-1.25,-4.875},
            {-1.113,0.0,-4.875},
            {-1.113,1.25,-4.875},
            {-1.113,2.5,-4.875},
            {-0.89,2.5,-3.9},
            {-0.89,1.25,-3.9},
            {-0.89,0.0,-3.9},
            {-0.89,-1.25,-3.9},
            {-0.179,-2.5,-3.996},
            {-0.224,-2.5,-4.995},
            {-0.224,-1.25,-4.995},
            {-0.224,0.0,-4.995},
            {-0.224,1.25,-4.995},
            {-0.224,2.5,-4.995},
            {-0.179,2.5,-3.996},
            {-0.179,1.25,-3.996},
            {-0.179,0.0,-3.996},
            {-0.179,-1.25,-3.996},
            {0.537,-2.5,-3.964},
            {0.671,-2.5,-4.955},
            {0.671,-1.25,-4.955},
            {0.671,0.0,-4.955},
            {0.671,1.25,-4.955},
            {0.671,2.5,-4.955},
            {0.537,2.5,-3.964},
            {0.537,1.25,-3.964},
            {0.537,0.0,-3.964},
            {0.537,-1.25,-3.964},
            {1.236,-2.5,-3.804},
            {1.545,-2.5,-4.755},
            {1.545,-1.25,-4.755},
            {1.545,0.0,-4.755},
            {1.545,1.25,-4.755},
            {1.545,2.5,-4.755},
            {1.236,2.5,-3.804},
            {1.236,1.25,-3.804},
            {1.236,0.0,-3.804},
            {1.236,-1.25,-3.804},
            {1.895,-2.5,-3.522},
            {2.369,-2.5,-4.403},
            {2.369,-1.25,-4.403},
            {2.369,0.0,-4.403},
            {2.369,1.25,-4.403},
            {2.369,2.5,-4.403},
            {1.895,2.5,-3.522},
            {1.895,1.25,-3.522},
            {1.895,0.0,-3.522},
            {1.895,-1.25,-3.522},
            {2.494,-2.5,-3.127},
            {3.117,-2.5,-3.909},
            {3.117,-1.25,-3.909},
            {3.117,0.0,-3.909},
            {3.117,1.25,-3.909},
            {3.117,2.5,-3.909},
            {2.494,2.5,-3.127},
            {2.494,1.25,-3.127},
            {2.494,0.0,-3.127},
            {2.494,-1.25,-3.127},
            {3.012,-2.5,-2.632},
            {3.765,-2.5,-3.29},
            {3.765,-1.25,-3.29},
            {3.765,0.0,-3.29},
            {3.765,1.25,-3.29},
            {3.765,2.5,-3.29},
            {3.012,2.5,-2.632},
            {3.012,1.25,-2.632},
            {3.012,0.0,-2.632},
            {3.012,-1.25,-2.632},
            {3.434,-2.5,-2.052},
            {4.292,-2.5,-2.564},
            {4.292,-1.25,-2.564},
            {4.292,0.0,-2.564},
            {4.292,1.25,-2.564},
            {4.292,2.5,-2.564},
            {3.434,2.5,-2.052},
            {3.434,1.25,-2.052},
            {3.434,0.0,-2.052},
            {3.434,-1.25,-2.052},
            {3.745,-2.5,-1.405},
            {4.681,-2.5,-1.757},
            {4.681,-1.25,-1.757},
            {4.681,0.0,-1.757},
            {4.681,1.25,-1.757},
            {4.681,2.5,-1.757},
            {3.745,2.5,-1.405},
            {3.745,1.25,-1.405},
            {3.745,0.0,-1.405},
            {3.745,-1.25,-1.405},
            {3.936,-2.5,-0.714},
            {4.92,-2.5,-0.893},
            {4.92,-1.25,-0.893},
            {4.92,0.0,-0.893},
            {4.92,1.25,-0.893},
            {4.92,2.5,-0.893},
            {3.936,2.5,-0.714},
            {3.936,1.25,-0.714},
            {3.936,0.0,-0.714},
            {3.936,-1.25,-0.714},
            {0.988,1.25,0.0},
            {0.988,0.0,0.0},
            {0.948,1.25,0.445},
            {0.948,0.0,0.445},
            {0.948,1.25,-0.445},
            {0.948,0.0,-0.445},
            {0.939,1.25,0.463},
            {0.939,0.0,0.463},
            {0.616,1.25,0.772},
            {0.616,0.0,0.772},
            {0.243,1.25,1.019},
            {0.243,0.0,1.019},
            {0.223,1.25,1.023},
            {0.223,0.0,1.023},
            {-0.22,1.25,0.963},
            {-0.22,0.0,0.963},
            {-0.645,1.25,0.825},
            {-0.645,0.0,0.825},
            {-0.661,1.25,0.812},
            {-0.661,0.0,0.812},
            {-0.89,1.25,0.429},
            {-0.89,0.0,0.429},
            {-1.047,1.25,0.01},
            {-1.047,0.0,0.01},
            {-1.047,1.25,-0.01},
            {-1.047,0.0,-0.01},
            {-0.89,1.25,-0.429},
            {-0.89,0.0,-0.429},
            {-0.661,1.25,-0.812},
            {-0.661,0.0,-0.812},
            {-0.645,1.25,-0.825},
            {-0.645,0.0,-0.825},
            {-0.22,1.25,-0.963},
            {-0.22,0.0,-0.963},
            {0.223,1.25,-1.023},
            {0.223,0.0,-1.023},
            {0.243,1.25,-1.019},
            {0.243,0.0,-1.019},
            {0.616,1.25,-0.772},
            {0.616,0.0,-0.772},
            {0.939,1.25,-0.463},
            {0.939,0.0,-0.463},

        };

        static float s_C4DCubeColors[][4] =
        {
            { 1.0f, 0.0f, 0.0f, 1.0f, },
            { 0.0f, 1.0f, 0.0f, 1.0f, },
            { 0.0f, 0.0f, 1.0f, 1.0f, },
            { 1.0f, 1.0f, 0.0f, 1.0f, },
            
            { 0.0f, 1.0f, 1.0f, 1.0f, },
            { 1.0f, 0.0f, 1.0f, 1.0f, },
            { 1.0f, 0.0f, 1.0f, 1.0f, },
            { 1.0f, 1.0f, 1.0f, 1.0f, },
        };

        static int s_C4DCubeIndices[][3] =
        {
            {0,10,11},
            {1,11,12},
            {2,12,13},
            {3,13,14},
            {4,14,15},
            {5,15,16},
            {6,16,17},
            {350,352,353},
            {8,18,19},
            {9,19,10},
            {10,20,21},
            {11,21,22},
            {12,22,23},
            {13,23,24},
            {14,24,25},
            {15,25,26},
            {16,26,27},
            {17,27,28},
            {18,28,29},
            {19,29,20},
            {20,30,31},
            {21,31,32},
            {22,32,33},
            {23,33,34},
            {24,34,35},
            {25,35,36},
            {26,36,37},
            {27,37,38},
            {28,38,39},
            {29,39,30},
            {30,40,41},
            {31,41,42},
            {32,42,43},
            {33,43,44},
            {34,44,45},
            {35,45,46},
            {36,46,47},
            {37,47,48},
            {38,48,49},
            {39,49,40},
            {40,50,51},
            {41,51,52},
            {42,52,53},
            {43,53,54},
            {44,54,55},
            {45,55,56},
            {46,56,57},
            {356,358,359},
            {48,58,59},
            {49,59,50},
            {50,60,61},
            {51,61,62},
            {52,62,63},
            {53,63,64},
            {54,64,65},
            {55,65,66},
            {56,66,67},
            {358,360,361},
            {58,68,69},
            {59,69,60},
            {60,70,71},
            {61,71,72},
            {62,72,73},
            {63,73,74},
            {64,74,75},
            {65,75,76},
            {66,76,77},
            {67,77,78},
            {68,78,79},
            {69,79,70},
            {70,80,81},
            {71,81,82},
            {72,82,83},
            {73,83,84},
            {74,84,85},
            {75,85,86},
            {76,86,87},
            {77,87,88},
            {78,88,89},
            {79,89,80},
            {80,90,91},
            {81,91,92},
            {82,92,93},
            {83,93,94},
            {84,94,95},
            {85,95,96},
            {86,96,97},
            {87,97,98},
            {88,98,99},
            {89,99,90},
            {90,100,101},
            {91,101,102},
            {92,102,103},
            {93,103,104},
            {94,104,105},
            {95,105,106},
            {96,106,107},
            {362,364,365},
            {98,108,109},
            {99,109,100},
            {100,110,111},
            {101,111,112},
            {102,112,113},
            {103,113,114},
            {104,114,115},
            {105,115,116},
            {106,116,117},
            {364,366,367},
            {108,118,119},
            {109,119,110},
            {110,120,121},
            {111,121,122},
            {112,122,123},
            {113,123,124},
            {114,124,125},
            {115,125,126},
            {116,126,127},
            {117,127,128},
            {118,128,129},
            {119,129,120},
            {120,130,131},
            {121,131,132},
            {122,132,133},
            {123,133,134},
            {124,134,135},
            {125,135,136},
            {126,136,137},
            {127,137,138},
            {128,138,139},
            {129,139,130},
            {130,140,141},
            {131,141,142},
            {132,142,143},
            {133,143,144},
            {134,144,145},
            {135,145,146},
            {136,146,147},
            {137,147,148},
            {138,148,149},
            {139,149,140},
            {140,150,151},
            {141,151,152},
            {142,152,153},
            {143,153,154},
            {144,154,155},
            {145,155,156},
            {146,156,157},
            {368,370,371},
            {148,158,159},
            {149,159,150},
            {150,160,161},
            {151,161,162},
            {152,162,163},
            {153,163,164},
            {154,164,165},
            {155,165,166},
            {156,166,167},
            {370,372,373},
            {158,168,169},
            {159,169,160},
            {160,170,171},
            {161,171,172},
            {162,172,173},
            {163,173,174},
            {164,174,175},
            {165,175,176},
            {166,176,177},
            {167,177,178},
            {168,178,179},
            {169,179,170},
            {170,180,181},
            {171,181,182},
            {172,182,183},
            {173,183,184},
            {174,184,185},
            {175,185,186},
            {176,186,187},
            {177,187,188},
            {178,188,189},
            {179,189,180},
            {180,190,191},
            {181,191,192},
            {182,192,193},
            {183,193,194},
            {184,194,195},
            {185,195,196},
            {186,196,197},
            {187,197,198},
            {188,198,199},
            {189,199,190},
            {190,200,201},
            {191,201,202},
            {192,202,203},
            {193,203,204},
            {194,204,205},
            {195,205,206},
            {196,206,207},
            {374,376,377},
            {198,208,209},
            {199,209,200},
            {200,210,211},
            {201,211,212},
            {202,212,213},
            {203,213,214},
            {204,214,215},
            {205,215,216},
            {206,216,217},
            {376,378,379},
            {208,218,219},
            {209,219,210},
            {210,220,221},
            {211,221,222},
            {212,222,223},
            {213,223,224},
            {214,224,225},
            {215,225,226},
            {216,226,227},
            {217,227,228},
            {218,228,229},
            {219,229,220},
            {220,230,231},
            {221,231,232},
            {222,232,233},
            {223,233,234},
            {224,234,235},
            {225,235,236},
            {226,236,237},
            {227,237,238},
            {228,238,239},
            {229,239,230},
            {230,240,241},
            {231,241,242},
            {232,242,243},
            {233,243,244},
            {234,244,245},
            {235,245,246},
            {236,246,247},
            {237,247,248},
            {238,248,249},
            {239,249,240},
            {240,250,251},
            {241,251,252},
            {242,252,253},
            {243,253,254},
            {244,254,255},
            {245,255,256},
            {246,256,257},
            {380,382,383},
            {248,258,259},
            {249,259,250},
            {250,260,261},
            {251,261,262},
            {252,262,263},
            {253,263,264},
            {254,264,265},
            {255,265,266},
            {256,266,267},
            {382,384,385},
            {258,268,269},
            {259,269,260},
            {260,270,271},
            {261,271,272},
            {262,272,273},
            {263,273,274},
            {264,274,275},
            {265,275,276},
            {266,276,277},
            {267,277,278},
            {268,278,279},
            {269,279,270},
            {270,280,281},
            {271,281,282},
            {272,282,283},
            {273,283,284},
            {274,284,285},
            {275,285,286},
            {276,286,287},
            {277,287,288},
            {278,288,289},
            {279,289,280},
            {280,290,291},
            {281,291,292},
            {282,292,293},
            {283,293,294},
            {284,294,295},
            {285,295,296},
            {286,296,297},
            {287,297,298},
            {288,298,299},
            {289,299,290},
            {290,300,301},
            {291,301,302},
            {292,302,303},
            {293,303,304},
            {294,304,305},
            {295,305,306},
            {296,306,307},
            {386,388,389},
            {298,308,309},
            {299,309,300},
            {300,310,311},
            {301,311,312},
            {302,312,313},
            {303,313,314},
            {304,314,315},
            {305,315,316},
            {306,316,317},
            {388,390,391},
            {308,318,319},
            {309,319,310},
            {310,320,321},
            {311,321,322},
            {312,322,323},
            {313,323,324},
            {314,324,325},
            {315,325,326},
            {316,326,327},
            {317,327,328},
            {318,328,329},
            {319,329,320},
            {320,330,331},
            {321,331,332},
            {322,332,333},
            {323,333,334},
            {324,334,335},
            {325,335,336},
            {326,336,337},
            {327,337,338},
            {328,338,339},
            {329,339,330},
            {330,340,341},
            {331,341,342},
            {332,342,343},
            {333,343,344},
            {334,344,345},
            {335,345,346},
            {336,346,347},
            {337,347,348},
            {338,348,349},
            {339,349,340},
            {340,0,1},
            {341,1,2},
            {342,2,3},
            {343,3,4},
            {344,4,5},
            {345,5,6},
            {346,6,7},
            {354,350,351},
            {348,8,9},
            {349,9,0},
            {351,353,18},
            {353,352,17},
            {352,350,7},
            {354,355,348},
            {355,351,8},
            {350,354,347},
            {356,357,48},
            {357,359,58},
            {358,356,47},
            {359,361,68},
            {361,360,67},
            {360,358,57},
            {362,363,98},
            {363,365,108},
            {364,362,97},
            {365,367,118},
            {367,366,117},
            {366,364,107},
            {368,369,148},
            {369,371,158},
            {370,368,147},
            {371,373,168},
            {373,372,167},
            {372,370,157},
            {374,375,198},
            {375,377,208},
            {376,374,197},
            {377,379,218},
            {379,378,217},
            {378,376,207},
            {380,381,248},
            {381,383,258},
            {382,380,247},
            {383,385,268},
            {385,384,267},
            {384,382,257},
            {386,387,298},
            {387,389,308},
            {388,386,297},
            {389,391,318},
            {391,390,317},
            {390,388,307},
            {0,11,1},
            {1,12,2},
            {2,13,3},
            {3,14,4},
            {4,15,5},
            {5,16,6},
            {6,17,7},
            {350,353,351},
            {8,19,9},
            {9,10,0},
            {10,21,11},
            {11,22,12},
            {12,23,13},
            {13,24,14},
            {14,25,15},
            {15,26,16},
            {16,27,17},
            {17,28,18},
            {18,29,19},
            {19,20,10},
            {20,31,21},
            {21,32,22},
            {22,33,23},
            {23,34,24},
            {24,35,25},
            {25,36,26},
            {26,37,27},
            {27,38,28},
            {28,39,29},
            {29,30,20},
            {30,41,31},
            {31,42,32},
            {32,43,33},
            {33,44,34},
            {34,45,35},
            {35,46,36},
            {36,47,37},
            {37,48,38},
            {38,49,39},
            {39,40,30},
            {40,51,41},
            {41,52,42},
            {42,53,43},
            {43,54,44},
            {44,55,45},
            {45,56,46},
            {46,57,47},
            {356,359,357},
            {48,59,49},
            {49,50,40},
            {50,61,51},
            {51,62,52},
            {52,63,53},
            {53,64,54},
            {54,65,55},
            {55,66,56},
            {56,67,57},
            {358,361,359},
            {58,69,59},
            {59,60,50},
            {60,71,61},
            {61,72,62},
            {62,73,63},
            {63,74,64},
            {64,75,65},
            {65,76,66},
            {66,77,67},
            {67,78,68},
            {68,79,69},
            {69,70,60},
            {70,81,71},
            {71,82,72},
            {72,83,73},
            {73,84,74},
            {74,85,75},
            {75,86,76},
            {76,87,77},
            {77,88,78},
            {78,89,79},
            {79,80,70},
            {80,91,81},
            {81,92,82},
            {82,93,83},
            {83,94,84},
            {84,95,85},
            {85,96,86},
            {86,97,87},
            {87,98,88},
            {88,99,89},
            {89,90,80},
            {90,101,91},
            {91,102,92},
            {92,103,93},
            {93,104,94},
            {94,105,95},
            {95,106,96},
            {96,107,97},
            {362,365,363},
            {98,109,99},
            {99,100,90},
            {100,111,101},
            {101,112,102},
            {102,113,103},
            {103,114,104},
            {104,115,105},
            {105,116,106},
            {106,117,107},
            {364,367,365},
            {108,119,109},
            {109,110,100},
            {110,121,111},
            {111,122,112},
            {112,123,113},
            {113,124,114},
            {114,125,115},
            {115,126,116},
            {116,127,117},
            {117,128,118},
            {118,129,119},
            {119,120,110},
            {120,131,121},
            {121,132,122},
            {122,133,123},
            {123,134,124},
            {124,135,125},
            {125,136,126},
            {126,137,127},
            {127,138,128},
            {128,139,129},
            {129,130,120},
            {130,141,131},
            {131,142,132},
            {132,143,133},
            {133,144,134},
            {134,145,135},
            {135,146,136},
            {136,147,137},
            {137,148,138},
            {138,149,139},
            {139,140,130},
            {140,151,141},
            {141,152,142},
            {142,153,143},
            {143,154,144},
            {144,155,145},
            {145,156,146},
            {146,157,147},
            {368,371,369},
            {148,159,149},
            {149,150,140},
            {150,161,151},
            {151,162,152},
            {152,163,153},
            {153,164,154},
            {154,165,155},
            {155,166,156},
            {156,167,157},
            {370,373,371},
            {158,169,159},
            {159,160,150},
            {160,171,161},
            {161,172,162},
            {162,173,163},
            {163,174,164},
            {164,175,165},
            {165,176,166},
            {166,177,167},
            {167,178,168},
            {168,179,169},
            {169,170,160},
            {170,181,171},
            {171,182,172},
            {172,183,173},
            {173,184,174},
            {174,185,175},
            {175,186,176},
            {176,187,177},
            {177,188,178},
            {178,189,179},
            {179,180,170},
            {180,191,181},
            {181,192,182},
            {182,193,183},
            {183,194,184},
            {184,195,185},
            {185,196,186},
            {186,197,187},
            {187,198,188},
            {188,199,189},
            {189,190,180},
            {190,201,191},
            {191,202,192},
            {192,203,193},
            {193,204,194},
            {194,205,195},
            {195,206,196},
            {196,207,197},
            {374,377,375},
            {198,209,199},
            {199,200,190},
            {200,211,201},
            {201,212,202},
            {202,213,203},
            {203,214,204},
            {204,215,205},
            {205,216,206},
            {206,217,207},
            {376,379,377},
            {208,219,209},
            {209,210,200},
            {210,221,211},
            {211,222,212},
            {212,223,213},
            {213,224,214},
            {214,225,215},
            {215,226,216},
            {216,227,217},
            {217,228,218},
            {218,229,219},
            {219,220,210},
            {220,231,221},
            {221,232,222},
            {222,233,223},
            {223,234,224},
            {224,235,225},
            {225,236,226},
            {226,237,227},
            {227,238,228},
            {228,239,229},
            {229,230,220},
            {230,241,231},
            {231,242,232},
            {232,243,233},
            {233,244,234},
            {234,245,235},
            {235,246,236},
            {236,247,237},
            {237,248,238},
            {238,249,239},
            {239,240,230},
            {240,251,241},
            {241,252,242},
            {242,253,243},
            {243,254,244},
            {244,255,245},
            {245,256,246},
            {246,257,247},
            {380,383,381},
            {248,259,249},
            {249,250,240},
            {250,261,251},
            {251,262,252},
            {252,263,253},
            {253,264,254},
            {254,265,255},
            {255,266,256},
            {256,267,257},
            {382,385,383},
            {258,269,259},
            {259,260,250},
            {260,271,261},
            {261,272,262},
            {262,273,263},
            {263,274,264},
            {264,275,265},
            {265,276,266},
            {266,277,267},
            {267,278,268},
            {268,279,269},
            {269,270,260},
            {270,281,271},
            {271,282,272},
            {272,283,273},
            {273,284,274},
            {274,285,275},
            {275,286,276},
            {276,287,277},
            {277,288,278},
            {278,289,279},
            {279,280,270},
            {280,291,281},
            {281,292,282},
            {282,293,283},
            {283,294,284},
            {284,295,285},
            {285,296,286},
            {286,297,287},
            {287,298,288},
            {288,299,289},
            {289,290,280},
            {290,301,291},
            {291,302,292},
            {292,303,293},
            {293,304,294},
            {294,305,295},
            {295,306,296},
            {296,307,297},
            {386,389,387},
            {298,309,299},
            {299,300,290},
            {300,311,301},
            {301,312,302},
            {302,313,303},
            {303,314,304},
            {304,315,305},
            {305,316,306},
            {306,317,307},
            {388,391,389},
            {308,319,309},
            {309,310,300},
            {310,321,311},
            {311,322,312},
            {312,323,313},
            {313,324,314},
            {314,325,315},
            {315,326,316},
            {316,327,317},
            {317,328,318},
            {318,329,319},
            {319,320,310},
            {320,331,321},
            {321,332,322},
            {322,333,323},
            {323,334,324},
            {324,335,325},
            {325,336,326},
            {326,337,327},
            {327,338,328},
            {328,339,329},
            {329,330,320},
            {330,341,331},
            {331,342,332},
            {332,343,333},
            {333,344,334},
            {334,345,335},
            {335,346,336},
            {336,347,337},
            {337,348,338},
            {338,349,339},
            {339,340,330},
            {340,1,341},
            {341,2,342},
            {342,3,343},
            {343,4,344},
            {344,5,345},
            {345,6,346},
            {346,7,347},
            {354,351,355},
            {348,9,349},
            {349,0,340},
            {351,18,8},
            {353,17,18},
            {352,7,17},
            {354,348,347},
            {355,8,348},
            {350,347,7},
            {356,48,47},
            {357,58,48},
            {358,47,57},
            {359,68,58},
            {361,67,68},
            {360,57,67},
            {362,98,97},
            {363,108,98},
            {364,97,107},
            {365,118,108},
            {367,117,118},
            {366,107,117},
            {368,148,147},
            {369,158,148},
            {370,147,157},
            {371,168,158},
            {373,167,168},
            {372,157,167},
            {374,198,197},
            {375,208,198},
            {376,197,207},
            {377,218,208},
            {379,217,218},
            {378,207,217},
            {380,248,247},
            {381,258,248},
            {382,247,257},
            {383,268,258},
            {385,267,268},
            {384,257,267},
            {386,298,297},
            {387,308,298},
            {388,297,307},
            {389,318,308},
            {391,317,318},
            {390,307,317},
        };

        

        // -----------------------------------------------------------------------------
        // Define the mesh and its material. The material defines the look of the
        // surface covering the mesh. If the material should contain normals, colors, or
        // texture coordinates then their number has to match the number of vertices.
        // If you do not support normals in a mesh, YoshiX will not apply lighting to
        // this mesh. A textured mesh always has to contain texture coordinates and a
        // handle to a texture. A mesh always has to contain vertices and indices.
        // -----------------------------------------------------------------------------
        SMeshInfo MeshInfo;

        MeshInfo.m_pVertices        = &s_TriangleVertices[0][0];
        MeshInfo.m_pNormals         = nullptr;
        MeshInfo.m_pColors          = nullptr;
        MeshInfo.m_pTexCoords       = nullptr;
        MeshInfo.m_NumberOfVertices = 4;
        MeshInfo.m_NumberOfIndices  = 12;
        MeshInfo.m_pIndices         = &s_TriangleIndices[0][0];
        MeshInfo.m_pTexture         = nullptr;

        CreateMesh(MeshInfo, &m_pTriangleMesh);

        MeshInfo.m_pVertices = &s_FloorVertices[0][0];
        MeshInfo.m_pNormals = nullptr;
        MeshInfo.m_pColors = &s_FloorColors[0][0];
        MeshInfo.m_pTexCoords = nullptr;
        MeshInfo.m_NumberOfVertices = 4;
        MeshInfo.m_NumberOfIndices = 6;
        MeshInfo.m_pIndices = &s_FloorIndices[0][0];
        MeshInfo.m_pTexture = nullptr;

        CreateMesh(MeshInfo, &m_pFloorMesh);


        MeshInfo.m_pVertices = &s_BackgroundVertices[0][0];
        MeshInfo.m_pNormals = nullptr;
        MeshInfo.m_pColors = &s_BackgroundColors[0][0];
        MeshInfo.m_pTexCoords = nullptr;
        MeshInfo.m_NumberOfVertices = 4;
        MeshInfo.m_NumberOfIndices = 6;
        MeshInfo.m_pIndices = &s_BackgroundIndices[0][0];
        MeshInfo.m_pTexture = nullptr;

        CreateMesh(MeshInfo, &m_pBackgroundMesh);

        MeshInfo.m_pVertices = &s_DefaultSquareVertices[0][0];
        MeshInfo.m_pNormals = nullptr;
        MeshInfo.m_pColors = &s_DefaultSquareColors[0][0];
        MeshInfo.m_pTexCoords = nullptr;
        MeshInfo.m_NumberOfVertices = 4;
        MeshInfo.m_NumberOfIndices = 6;
        MeshInfo.m_pIndices = &s_DefaultSquareIndices[0][0];
        MeshInfo.m_pTexture = nullptr;

        CreateMesh(MeshInfo, &m_pDefaultSquare);

        CreateMesh(newTriangle.MeshInfo, &m_pIsoscelesTriangleMesh);

        MeshInfo.m_pVertices = &s_C4DCubeVertices[0][0];
        MeshInfo.m_pNormals = nullptr;                          // No normals
        MeshInfo.m_pColors = nullptr;
        MeshInfo.m_pTexCoords = nullptr;                          // No texture coordinates
        MeshInfo.m_NumberOfVertices = 392;
        MeshInfo.m_NumberOfIndices = 2352;
        MeshInfo.m_pIndices = &s_C4DCubeIndices[0][0];
        MeshInfo.m_pTexture = nullptr;

        CreateMesh(MeshInfo, &m_pC4DCubeMesh);

        return true;
    }

    // -----------------------------------------------------------------------------

    bool CApplication::InternOnReleaseMeshes()
    {
        // -----------------------------------------------------------------------------
        // Important to release the mesh again when the application is shut down.
        // -----------------------------------------------------------------------------
        ReleaseMesh(m_pTriangleMesh);
        ReleaseMesh(m_pFloorMesh);
        //ReleaseMesh(newTriangle.m_pIsoscelesTriangleMesh);
        ReleaseMesh(m_pIsoscelesTriangleMesh);
        ReleaseMesh(m_pBackgroundMesh);
        ReleaseMesh(m_pDefaultSquare);

        

        return true;
    }

    // -----------------------------------------------------------------------------

    bool CApplication::InternOnResize(int _Width, int _Height)
    {
        float ProjectionMatrix[16];

        // -----------------------------------------------------------------------------
        // The projection matrix defines the size of the camera frustum. The YoshiX
        // camera has the shape of a pyramid with the eye position at the top of the
        // pyramid. The horizontal view angle is defined by the vertical view angle
        // and the ratio between window width and window height.
        // -----------------------------------------------------------------------------
        GetProjectionMatrix(m_FieldOfViewY, static_cast<float>(_Width) / static_cast<float>(_Height), 0.1f, 100.0f, ProjectionMatrix);

        SetProjectionMatrix(ProjectionMatrix);

        

        return true;
    }

    // -----------------------------------------------------------------------------


    float g_X = 0.0f;
    float g_Step = 1.5f;

    //struct POINT {
    //    float x;
    //    float y;
    //};

    POINT p = { 0,0 };
    POINT prevP = { 0,0 };
    POINT deltaP = { 0,0 };
    POINT pos = { 0,0 };
    bool firstRunDone = false;
    int delay = 0;
    float posX = 0.0f;
    float posY = 0.0f;
    float sensitivity = 0.05f;
    bool mouseIsFree = false;
    int windowXDisplacement = -8;
    int windowYDisplaycement = 0;

    LPCTSTR WindowName = L"YoshiX-Example";

    HWND window;
    RECT rect = { 0 };

    //HWND window = FindWindow(L"TaskManagerWindow", L"Task-Manager");

    bool cursorMovement() {

        if (GetCursorPos(&p))
        {
            //std::cout << "DivX: " << GET_X_LPARAM << "\n";
            if (!firstRunDone) {
                prevP = p;
                window = FindWindowW(0, L"YoshiX-Example");

                if (window) {
                    GetWindowRect(window, &rect);
                }
            }


            if (delay % 1 == 0) {
                deltaP.x = prevP.x - p.x;
                deltaP.y = prevP.y - p.y;

                prevP = p;
            }
            firstRunDone = true;

            delay++;

            posX += deltaP.x * sensitivity;
            posY += deltaP.y * sensitivity;


            //SetCursorPos(1900, 720);
            //prevP = { 1900, 720 };

            if (!mouseIsFree) {
                SetCursorPos(rect.left + windowXDisplacement + 400, rect.top + windowYDisplaycement + 300);
                prevP = { rect.left + windowXDisplacement + 400, rect.top + windowYDisplaycement + 300 };
            }
        }

        return true;
    }

    bool CApplication::InternOnMouseEvent(int _X, int _Y, int _Button, bool _IsButtonDown, bool _IsDoubleClick, int _WheelDelta) {
        //std::cout << "x: " << _X << "; y: " << _Y << "\n";

        if (_IsButtonDown) {
            std::cout << "Button Down: " << _Button << " \n";
        }

        //mouseControlls(_X, _Y);

        return true;
    }

    bool CApplication::InternOnKeyEvent(unsigned int _Key, bool _IsKeyDown, bool _IsAltDown) {

        // -----------------------------------------------------------------------------
        // Pressing the 'Space' key implies the condition to become true.
        // -----------------------------------------------------------------------------
        if (_Key == ' ')
        {
            mouseIsFree = true;
            std::cout << "Jump" << std::endl;
        }

        return true;
    }

    bool CApplication::InternOnUpdate()
    {

        //cursorMovement();

        /*if (!mouseIsFree) {
            SetCursorPos(rect.left + windowXDisplacement + 400, rect.top + windowYDisplaycement + 300);
            prevP = { rect.left + windowXDisplacement + 400, rect.top + windowYDisplaycement + 300 };
        }*/
        
        
        
        cursorMovement();

        //if (m_KeyStat)

        //char key = getch();
        //int value = key;

        //std::cout << "Key: " << key << "\n";

        
        

        float Eye[3];
        float At [3];
        float Up [3];

        float ViewMatrix[16];
        float TranslationMatrix[16];
        float RotationXMatrix[16];
        float RotationYMatrix[16];
        float RotationZMatrix[16];

        float RotationMatrix[16];

        // -----------------------------------------------------------------------------
        // Define position and orientation of the camera in the world.
        // -----------------------------------------------------------------------------
        Eye[0] = 0.0f; At[0] = 0.0f; Up[0] = 0.0f;
        Eye[1] = 0.0f; At[1] = 0.0f; Up[1] = 1.0f;
        Eye[2] = -15.0f; At[2] = 0.0f; Up[2] = 0.0f;

        GetTranslationMatrix(0.0f, 0.0f, 0.0f, TranslationMatrix);
        GetRotationXMatrix(posY, RotationXMatrix);
        GetRotationYMatrix(posX, RotationYMatrix);
        GetRotationZMatrix(0.0f, RotationZMatrix);

        MulMatrix(RotationYMatrix, RotationXMatrix, RotationMatrix);

        GetViewMatrix(Eye, At, Up, ViewMatrix);

        MulMatrix(RotationMatrix, ViewMatrix, ViewMatrix);

        

        SetViewMatrix(ViewMatrix);

        

        return true;
    }

    
    double calcAngle(double hypotenuse, double opositeSide, double adjacentSide) {
        //std::cout << "/*hypotenuse: " << hypotenuse << ", opositeSide: " << opositeSide << " adjacentSide: " << adjacentSide << "\n";
        //std::cout << "*/Wert: " << ((pow(hypotenuse, 2) - pow(opositeSide, 2) - pow(adjacentSide, 2)) / (-2 * opositeSide * adjacentSide)) << "\n";
        return acos((pow(hypotenuse, 2) - pow(opositeSide, 2) - pow(adjacentSide, 2)) / (-2 * opositeSide * adjacentSide)) * 180 / PI;
    }
   

    // -----------------------------------------------------------------------------

    bool CApplication::InternOnFrame()
    {
        float ArmWorldMatrix[16];

        float UAWorldMatrix[16];
        float UAScaleMatrix[16];
        float UATranslationMatrix[16];
        float UARotationMatrix[16];

        float LAWorldMatrix[16];
        float LAScaleMatrix[16];
        float LATranslationMatrix[16];
        float LARotationMatrix[16];



        float UALength = 2.0f;
        float LALength = 2.0f;

        float UARotation = 60.0f;
        float LARotation = -60.0f;

        float targetLength = 3.5f;

        UARotation = calcAngle(LALength, UALength, targetLength);
        LARotation = -(180 - calcAngle(targetLength, LALength, UALength));

        //std::cout << "Angle: " << calcAngle(targetLength, LALength, UALength) << "\n";

        //std::cout << "UARotation: " << UARotation << "; LARotation: " << LARotation << "\n";

        GetScaleMatrix(0.1f, UALength, 1.0f, UAScaleMatrix);
        GetTranslationMatrix(0.0f, 1.0f, 0.0f, UATranslationMatrix);
        GetRotationZMatrix(UARotation, UARotationMatrix);
        MulMatrix(UAScaleMatrix, UATranslationMatrix, UAWorldMatrix);
        MulMatrix(UAWorldMatrix, UARotationMatrix, UAWorldMatrix);

        SetWorldMatrix(UAWorldMatrix);
        DrawMesh(m_pDefaultSquare);

        GetScaleMatrix(0.1f, LALength, 1.0f, LAScaleMatrix);
        GetTranslationMatrix(0.0f, 1.0f, 0.0f, LATranslationMatrix);
        GetRotationZMatrix(LARotation, LARotationMatrix);

        MulMatrix(LAScaleMatrix, LATranslationMatrix, LAWorldMatrix);
        MulMatrix(LAWorldMatrix, LARotationMatrix, LAWorldMatrix);

        GetTranslationMatrix(0.0f, UALength, 0.0f, UATranslationMatrix);
        MulMatrix(LAWorldMatrix, UATranslationMatrix, LAWorldMatrix);

        MulMatrix(LAWorldMatrix, UARotationMatrix, LAWorldMatrix);

        SetWorldMatrix(LAWorldMatrix);
        DrawMesh(m_pDefaultSquare);
        

        float WorldMatrix[16];
        float ScaleMatrix[16];
        float TranslationMatrix[16];
        float RotationMatrix[16];

        //GetTranslationMatrix(posX, posY, 0.0f, WorldMatrix);
        GetTranslationMatrix(0.0f, 0.0f, 0.1f, WorldMatrix);
        

        SetWorldMatrix(WorldMatrix);

        //DrawMesh(newTriangle.m_pIsoscelesTriangleMesh);
        DrawMesh(m_pIsoscelesTriangleMesh);
        //DrawMesh(m_pTriangleMesh);

        


        GetScaleMatrix(5.0f, 1.0f, 5.0f, ScaleMatrix);
        GetTranslationMatrix(0.0f, -3.0f, 0.0f, TranslationMatrix);
        
        MulMatrix(ScaleMatrix, TranslationMatrix, WorldMatrix);
        
        SetWorldMatrix(WorldMatrix);
        DrawMesh(m_pFloorMesh);


        GetTranslationMatrix(0.0f, 0.0f, 2.0f, TranslationMatrix);
        GetScaleMatrix(5.0f, 5.0f, 5.0f, ScaleMatrix);
        MulMatrix(ScaleMatrix, TranslationMatrix, WorldMatrix);
        SetWorldMatrix(WorldMatrix);

        DrawMesh(m_pBackgroundMesh);


        GetTranslationMatrix(4.0f, -5.0f, 0.0f, WorldMatrix);

        SetWorldMatrix(WorldMatrix);
        DrawMesh(m_pC4DCubeMesh);

        return true;
    }

    
} // namespace

//void main()
//{
//    CApplication Application;
//
//    RunApplication(800, 600, "YoshiX-Example", &Application);
//}